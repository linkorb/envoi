# {{ repo_managed }}
name: Helm Publish

on:
  workflow_dispatch:
  workflow_call:

jobs:
  helm:
    runs-on: self-hosted

    steps:
    - name: GitHub Environment Variables Action
      uses: FranzDiebold/github-env-vars-action@v2

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check file existence
      id: check_files
      uses: andstor/file-existence-action@v2
      with:
        files: "helm-chart"

    - uses: actions-ecosystem/action-get-latest-tag@v1
      id: get-latest-tag
      with:
        semver_only: true

    - name: Remove v from release
      if: steps.check_files.outputs.files_exists == 'true'
      run: |
        TMP=${{ steps.get-latest-tag.outputs.tag }}
        echo "VERSION=${TMP#v}" >> $GITHUB_ENV

    - name: Output release
      if: steps.check_files.outputs.files_exists == 'true'
      run: "echo ${{env.VERSION}}"

    - name: Install Helm
      if: steps.check_files.outputs.files_exists == 'true'
      uses: azure/setup-helm@v3

    - name: Set version name in Chart.yaml
      if: steps.check_files.outputs.files_exists == 'true'
      run: "sed -i s/chartversionplaceholder/${{env.VERSION}}/ helm-chart/Chart.yaml"

    - name: Set version name in Chart.yaml
      if: steps.check_files.outputs.files_exists == 'true'
      run: "sed -i s/appversionplaceholder/${{env.VERSION}}/ helm-chart/Chart.yaml"

    - name: Add Bitnami Helm repo
      if: steps.check_files.outputs.files_exists == 'true'
      run: helm repo add bitnami https://charts.bitnami.com/bitnami

    - name: Update Helm repos
      if: steps.check_files.outputs.files_exists == 'true'
      run: helm repo update

    - name: Install dependencies for Helm chart
      if: steps.check_files.outputs.files_exists == 'true'
      continue-on-error: true
      run: cd helm-chart && helm dependency update

    - name: Package Helm chart
      if: steps.check_files.outputs.files_exists == 'true'
      run: helm package helm-chart/

    - name: Upload packaged Chart - if this fails give repo permission to chartmuseum-pass org variable
      if: steps.check_files.outputs.files_exists == 'true'
      run: curl --silent --fail --show-error -u "github:${{ secrets.CHARTMUSEUMPASS }}" --data-binary "@`ls -1 *.tgz | head -n1`" https://charts.linkorb.com/api/charts
